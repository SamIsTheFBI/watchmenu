#!/usr/bin/env bash

# Check if script is already running
if [ "$(pgrep -f "${0}")" != "$$" ]; then
    SCRIPTNAME="$(echo "${0}" | awk -F '/' '{print $NF}')"
    echo "Another instance of ${SCRIPTNAME} already exists!"
    [ -x "$(command -v notify-send)" ] && \
        notify-send -t 2000 "" "Another instance of ${SCRIPTNAME} already exists!"
    exit
fi

# Select prompt
case "${WATCHMENU_PROMPT}" in
    rofi)
        prompt="rofi -dmenu -p"
        ;;
    fzf)
        prompt="fzf --bind alt-enter:print-query --prompt"
        ;;
    dmenu | "")
        prompt="dmenu -l 16 -p"
        ;;
    *)
        prompt="${WATCHMENU_PROMPT}"
        echo "Selected custom prompt: ${prompt}"
        ;;
esac

# Select player
case "${VIDEO_PLAYER}" in
    mpv | "")
        video_player="mpv --fs --save-position-on-quit --no-keepaspect-window"
        ;;
    *)
        video_player="${VIDEO_PLAYER}"
        echo "Selected custom video player: ${video_player}"
        ;;
esac

# Get cache location
WATCHMENU_CACHE="${XDG_CACHE_HOME:-${HOME}/.cache}/watchmenu"
[ ! -d "${WATCHMENU_CACHE}" ] && mkdir -vp "${WATCHMENU_CACHE}"

ANIME_DIRS=(  "${HOME}/Media/Anime"    "${HOME}/Shared/Media/Anime"    "${HOME}/Cloud/Media/Anime"    )
TVSHOW_DIRS=( "${HOME}/Media/TV Shows" "${HOME}/Shared/Media/TV Shows" "${HOME}/Cloud/Media/TV Shows" )
MOVIE_DIRS=(  "${HOME}/Media/Movies"   "${HOME}/Shared/Media/Movies"   "${HOME}/Cloud/Media/Movies"   )
VIDEO_DIRS=(  "${HOME}/Videos"         "${HOME}/Downloads"                                            )

# Show help
help () {
    selection="$(cat <<- EOF | ${prompt} " Help page"
		 Cancel
		 Back
		USAGE:
		Search for media you have in your device. You can specify directories in this script itself.
		Once you're done, choose Update on launching this script again.
		To list all entries in your media directories, choose Show All in previous menu.
		COMMANDS:
		:q - Quit
		:s - Go to search screen
		:b - Go back to previous screen
		EOF
    )"

    case "${selection}" in
        :q | " Cancel" | "")
            exit
            ;;
        :s)
            main
            ;;
        :b | " Back")
            main
            ;;
        *)
            main
            ;;
    esac
}

# Update media list
update_list () {
    echo "Category to update: $1"
    case "$1" in
    anime )
        find "${ANIME_DIRS[@]}" -maxdepth 1 -mindepth 1 -type d  2>/dev/null \
            | awk -F '/' '{print $NF}' \
            | sort > "${WATCHMENU_CACHE}/watchmenu-anime-list"
            ;;
    tvshows )
        find "${TVSHOW_DIRS[@]}" -maxdepth 1 -mindepth 1 -type d \
            | awk -F '/' '{print $NF}' \
            | sort > "${WATCHMENU_CACHE}/watchmenu-tvshows-list"
            ;;
    movies )
        find "${MOVIE_DIRS[@]}" -maxdepth 1 -mindepth 1 \
            | awk -F '/' '{print $NF}' \
            | sort > "${WATCHMENU_CACHE}/watchmenu-movies-list"
            ;;
    videos )
        find "${VIDEO_DIRS[@]}" -maxdepth 1 -mindepth 1 -type f \
            -name "*.mp4" -o -name "*.mkv" -o -name "*.avi" \
            -name "*.ogv" -o -name "*.webm" -o -name "*.rmvb" \
            -name "*.flv" -o -name "*.wmv" -o -name "*.mpeg" \
            -name "*.mpg" -o -name "*.m4v" -o -name "*.3gp" \
            | awk -F '/' '{print $NF}' \
            | sort > "${WATCHMENU_CACHE}/watchmenu-videos-list"
        find "${VIDEO_DIRS[@]}" -maxdepth 1 -mindepth 1 -type f \
            -name "*.mp4" -o -name "*.mkv" -o -name "*.avi" \
            -name "*.ogv" -o -name "*.webm" -o -name "*.rmvb" \
            -name "*.flv" -o -name "*.wmv" -o -name "*.mpeg" \
            -name "*.mpg" -o -name "*.m4v" -o -name "*.3gp" \
            | awk -F '/' '{print $NF"<->"$0}' \
            | sort \
            | awk -F '<->' '{print $NF}' > "${WATCHMENU_CACHE}/watchmenu-videos-paths"
            ;;

    esac

    cat "${WATCHMENU_CACHE}/watchmenu-anime-list" \
        "${WATCHMENU_CACHE}/watchmenu-movies-list" \
        "${WATCHMENU_CACHE}/watchmenu-tvshows-list" \
        "${WATCHMENU_CACHE}/watchmenu-videos-list" \
        | sort > ${WATCHMENU_CACHE}/watchmenu-all-list
}

# Check if movie or tv show directory 
check_dir () {
    dir1="$(echo "${show_dir}" | awk -F '/' '{print $NF}' )"
    echo "Selected: $dir1"
    dir_type="$(echo "${show_dir}" | sed "s/${dir1}//g" | sed 's/.$//g' )"
    echo "From: ${dir_type}"

    for i in "${MOVIE_DIRS[@]}"
    do
      [[ "${i}" == "${dir_type}" ]] && dir_type='MOVIE' && break
    done
}

# Add to Watch History
add_to_hist () {
    entry="${1}"
    if [ ! -z "${entry}" ]; then
        echo "Entry: ${entry}"
        title="$(echo "${entry}" | awk -F '<==>' '{print $1}' )"
        [[ "${title}" != "$(sed -n '$p' "${WATCHMENU_CACHE}/watchmenu-watch-history" | awk -F '<==>' '{print $1}' )" ]] && \
        echo "${entry}" >> "${WATCHMENU_CACHE}/watchmenu-watch-history" 
        echo "Added entry to watch history"
    fi
}

# Make grep pattern
grepFunc () {
  grep_pattern="$(echo "${1}" | \
    sed -r 's/\[/\\\[/g' | \
    sed -r 's/\]/\\\]/g' )"
  echo "Grep Pattern: ${grep_pattern}"
}

# Search YouTube Video
search_youtube_vid () {
    title=" Search YouTube Videos "
    options=$( echo -e " Cancel\n Back\n$(tac "${WATCHMENU_CACHE}/watchmenu-watch-history" | grep "^ " | awk -F '<==>' '{print $1}' | awk '!seen[$0]++' )" )

    query="$(${prompt} "${title}" < <(echo "${options}"))"

    case "${query}" in
      :q | " Cancel")
        exit
        ;;
      :b | :s | " Back")
        main
        ;;
       *)
        grepFunc "${query}"

        entry="$(cat "${WATCHMENU_CACHE}/watchmenu-watch-history" | grep "${grep_pattern}" | sed -n '1p')"
        url="$(echo ${entry} | awk -F '<==>' '{print $2}' )"
        
        ${video_player} "${url}"
        add_to_hist "${entry}"
        ;;
      '')
        exit
        ;;
      *)
        query="${query// /+}"
        [ -z "${YT_API_KEY}" ] && YT_API_KEY="$( cat "${HOME}"/.api_keys/YT_API_KEY )"
        urlstring="https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=20&key=${YT_API_KEY}"

        [ -e "${WATCHMENU_CACHE}/youtube-search-results" ] && \
          rm -rf "${WATCHMENU_CACHE}/youtube-search-results" || \
          touch "${WATCHMENU_CACHE}/youtube-search-results"
        curl -s "${urlstring}" \
          | jq -r '.items[] | "  \(.snippet.channelTitle) - \(.snippet.title)<==>https://www.youtube.com/watch?v=\(.id.videoId)"' \
          | sed 's/&amp;/\&/g' | sed 's/&#38;/\&/g' \
          | sed "s/&apos;/\'/g" | sed "s/&#39;/\'/g" \
          | sed 's/&quot;/\"/g' | sed 's/&#34;/\"/g' >> "${WATCHMENU_CACHE}/youtube-search-results"

        title="$(cat "${WATCHMENU_CACHE}/youtube-search-results" | awk -F '<==>' '{print $1}' | ${prompt} "Select Video" )"

        case "${title}" in
          :b) 
            ;;
          :s)
            main
            ;;
          *)
            if [ ! -z "${title}" ]; then
                grepFunc "${title}"

                entry="$(cat "${WATCHMENU_CACHE}/youtube-search-results" | grep -i "$grep_pattern" | sed -n '1p')"
                url="$(echo "${entry}" | awk -F '<==>' '{print $2}' )"

                ${video_player} "${url}"
                add_to_hist "${entry}"
            fi
            ;;
        esac
        ;;
    esac
    search_youtube_vid
}

# Search YouTube Playlist
search_youtube_playlist () {
    title=" Search YouTube Playlists "
    options=$( echo -e " Cancel\n Back\n$(tac "${WATCHMENU_CACHE}/watchmenu-watch-history" | grep "^ " | awk -F '<==>' '{print $1}' | awk '!seen[$0]++' )" )

    query="$(${prompt} "${title}" < <(echo "${options}"))"

    case "${query}" in
      :q | " Cancel")
        exit
        ;;
      :b | :s | " Back")
        main
        ;;
       *)
        grepFunc "${query}"

        entry="$(cat "${WATCHMENU_CACHE}/watchmenu-watch-history" | grep "${grep_pattern}" | sed -n '1p')"
        url="$(echo ${entry} | awk -F '<==>' '{print $2}' )"
        entry_type="$(echo ${entry} | awk -F '<==>' '{print $3}' )"

        [ "${entry_type}" == 'playlist_file' ] && \
          ${video_player} --playlist="${url}" || ${video_player} "${url}"
       
        add_to_hist "${entry}"
        search_youtube_playlist
        ;;
      '')
        exit
        ;;
    esac

    query="${query// /+}"
    [ -z "${YT_API_KEY}" ] && YT_API_KEY="$( cat "${HOME}"/.api_keys/YT_API_KEY )"
    urlstring="https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=playlist&maxResults=20&key=${YT_API_KEY}"

    [ -e "${WATCHMENU_CACHE}/youtube-search-results" ] && \
      rm -rf "${WATCHMENU_CACHE}/youtube-search-results" || \
      touch "${WATCHMENU_CACHE}/youtube-search-results"
    
    curl -s "${urlstring}" \
      | jq -r '.items[] | "  \(.snippet.channelTitle) - \(.snippet.title)<==>https://www.youtube.com/playlist?list=\(.id.playlistId)"' \
      | sed 's/&amp;/\&/g' | sed 's/&#38;/\&/g' \
      | sed "s/&apos;/\'/g" | sed "s/&#39;/\'/g" \
      | sed 's/&quot;/\"/g' | sed 's/&#34;/\"/g' >> "${WATCHMENU_CACHE}/youtube-search-results"

    list_playlists
}

# List YouTube playlists
list_playlists () {
    title="$(cat "${WATCHMENU_CACHE}/youtube-search-results" | awk -F '<==>' '{print $1}' | ${prompt} "Select Playlist" )"

    case "${title}" in
      ":b" | "") 
        ;;
      ":s")
        echo "To the main menu"
        main
        ;;
      *)
        if [ ! -z "${title}" ]; then
            grepFunc "${title}"

            entry="$(cat "${WATCHMENU_CACHE}/youtube-search-results" | grep -i "${grep_pattern}" | sed -n '1p')"
            title="$(echo "${entry}"| awk -F '<==>' '{print $1}' )"
            url="$(echo "${entry}"| awk -F '<==>' '{print $2}' )"

            extract="$( echo -e "Yes\nNo" | ${prompt} "Extract Video links to play?" )"

            case "${extract}" in
              Yes) 
                youtube_video_extract "${url}"
                ${video_player} --playlist="${yturls}"
                entry="${title}<==>${yturls}<==>playlist_file"
                ;;
              No) 
                ${video_player} "${url}"
                ;;
              '' | :b)
                list_playlists
                ;;
              :s)
                main
                ;;
              :q)
                exit
                ;;
            esac
            add_to_hist "${entry}"
        fi
        ;;
    esac
    search_youtube_playlist
}

# Extract YouTube videos from playlist link using yt-dlp
youtube_video_extract () {
    playlisturl="${1}"
    playlistId="$(echo "${playlisturl}" | awk -F '=' '{print $2}')"
    echo "Playlist ID: ${playlistId}"
    yturls="${WATCHMENU_CACHE}/yt_vid_extract/${playlistId}.m3u"
    [ ! -d  "${WATCHMENU_CACHE}/yt_vid_extract" ] && mkdir -p "${WATCHMENU_CACHE}/yt_vid_extract"
    if [ ! -f "${yturls}" ]; then
      touch "${yturls}"
      notify-send -r 309872 -t 4000 "" "Extracting video links to ${yturls}"
      yt-dlp --no-flat-playlist --print "https://www.youtube.com/watch?v=%(id)s" "${playlisturl}" >> "${yturls}"
    fi
}

# Watch History menu
watch_history () {
    title=" Watch History"
    options="$(echo -e " Cancel\n Back\n Clear Watch History\n$(tac "${WATCHMENU_CACHE}/watchmenu-watch-history" | awk -F '<==>' '{print $1}')")"
    watch_history_sel="$(${prompt} "${title}" < <(echo "${options}"))"

    grepFunc "${watch_history_sel}"
    
    entry="$(cat "${WATCHMENU_CACHE}/watchmenu-watch-history" | grep -i "${grep_pattern}" | sed -n '1p' )"
    file_path="$(echo "${entry}" | awk -F '<==>' '{print $2}')"
    entry_type="$( echo "${entry}" | awk -F '<==>' '{print $3}')" 

    case "${watch_history_sel}" in
      :q | " Cancel" | '') 
        exit
        ;;
      :s | :b | " Back") 
        main
        ;;
      " Clear Watch History")
        rm -rf "${WATCHMENU_CACHE}/watchmenu-watch-history"
        ;;
      " Videos")
        ${video_player} --playlist="${LAST_PLAYED_PATH}"
        main
        ;;
      *) 
        if [ "${entry_type}" == 'playlist_file' ]; then
          ${video_player} --playlist="${file_path}"
        else
          ${video_player} "${file_path}"
        fi
        add_to_hist "${entry}" 
        ;;
    esac
}

# Main menu
main () {
    LAST_PLAYED_NAME="$(tac "${WATCHMENU_CACHE}/watchmenu-watch-history" | awk -F '<==>' '{print $1}'  | sed -n '1p')"
    LAST_PLAYED_PATH="$(tac "${WATCHMENU_CACHE}/watchmenu-watch-history" | awk -F '<==>' '{print $2}' | sed -n '1p')"

    title=" Search"
    options="$(echo -e " Cancel\n神 Last Played [${LAST_PLAYED_NAME}]\n Search YouTube Playlists\n Search YouTube Videos\n Watch History\n Show All\n Help\n Update\n話 Anime\n TV Shows\n Movies\n Videos" )"

    # Request selection
    main_selection="$(${prompt} "${title}" < <(echo "${options}"))"

    echo "Search Query: ${main_selection}"
    case "${main_selection}" in
        " Search YouTube Videos")
            search_youtube_vid
            ;;
        " Search YouTube Playlists")
            search_youtube_playlist
            ;;
        *youtube*watch?v=*)
            id="$(awk -F '=' '{print $NF}' <<< ${main_selection})"
            title="$(yt-dlp --no-warnings --print "  %(channel)s - %(title)s" "${id}")"
            entry="${title}<==>${main_selection}"

            ${video_player} "${main_selection}"
            add_to_hist "${entry}"
            main
            ;;
        *youtu.be*)
            id="$(awk -F '/' '{print $NF}' <<< ${main_selection})"
            title="$(yt-dlp --no-warnings --print "  %(channel)s - %(title)s" "${id}")"
            entry="${title}<==>${main_selection}"

            ${video_player} "${main_selection}"
            add_to_hist "${entry}"
            main
            ;;
        *youtube*playlist?list=*)
            title="$(yt-dlp --no-warnings -I 1:1,1 --print "  %(playlist_uploader)s - %(playlist_title)s" "${main_selection}")"
            extract="$( echo -e "Yes\nNo" | ${prompt} "Extract Video links to play?" )"

            case "${extract}" in
              Yes) 
                youtube_video_extract "${main_selection}"
                ${video_player} --playlist="${yturls}"
                entry="${title}<==>${yturls}<==>playlist_file"
                ;;
              No) 
                ${video_player} "${main_selection}"
                entry="${title}<==>${main_selection}"
                ;;
              '' | :b | :s)
                main
                ;;
              :q)
                exit
                ;;
            esac
            add_to_hist "${entry}"
            main
            ;;
        http*mp4* | http*webm* | http*mkv* | http*cdn*)
            title="$(echo "${main_selection}" | awk -F '/' '{print $NF}')"
            entry="${title}<==>${main_selection}"

            ${video_player} "${main_selection}"      
            add_to_hist "${entry}"
            main
            ;;
        :q* | " Cancel" | '')
            exit
            ;;
        :h | " Help")
            help
            ;;
        *"神 Last Played"*)
            echo "${LAST_PLAYED_NAME}"
            case "${LAST_PLAYED_NAME}" in
              " Videos")
                  ${video_player} --playlist="${LAST_PLAYED_PATH}"
                  main
                  ;;
              '')
                  notify-send -r 309872 -t 2000 "" "No record of last played items"
                  main
                  ;;
              *) 
                  entry="$(tac "${WATCHMENU_CACHE}/watchmenu-watch-history" | sed -n '1p')"
                  entry_type="$(echo ${entry} | awk -F '<==>' '{print $3}' )"

                  [ "${entry_type}" == 'playlist_file' ] && \
                    ${video_player} --playlist="${LAST_PLAYED_PATH}" || ${video_player} "${LAST_PLAYED_PATH}"
       
                  main
                  ;;
            esac
            ;;
        " Watch History")
            watch_history && main
            ;;
        :u | " Update")
            title=" Choose category"
            options="$(printf " Cancel\n Back\n Update All\n話 Anime\n TV Shows\n Movies\n Videos")"

            update_selection="$(${prompt} "${title}" < <(echo "${options}"))"

            case "${update_selection}" in
                :q | " Cancel" | '')
                    exit
                    ;;
                :s)
                    main
                    ;;
                :b | " Back")
                    main
                    ;;
                " Update All")
                    update_list anime
                    update_list tvshows
                    update_list movies
                    update_list videos
                    ;;
                "話 Anime")
                    update_list anime
                    ;;
                " TV Shows")
                    update_list tvshows
                    ;;
                " Movies")
                    update_list movies
                    ;;
                " Videos")
                    update_list videos
                    ;;
            esac
            main
            ;;
        /* | ~*)
            if [[ -e "${main_selection}" ]]; then
              title="$(echo "${main_selection}" | awk -F '/' '{print $NF}')"
              entry="${title}<==>${main_selection}"

              ${video_player} "${main_selection}"
              add_to_hist "${entry}"
            else
              notify-send -r 309872 -t 2000 " Error" "Could not find what you're looking for!"
            fi
            main
            ;;
    esac

    search_results
}

# Get the root directory of given file/sub-directory by checking with above specified directories. Brute forcing?
abs_dir () {
    # Find $1 in different arrays of user specified directories. Not using -name flag to avoid problems with special characters.
    # Selecting every line related to $1 with `grep -F` (-F flag to select special characters as well)
    # and picking the first one with sed, since that's the root directory of $1.  
    path="$(find "${VIDEO_DIRS[@]/%//${1}}" "${MOVIE_DIRS[@]/%//${1}}" "${ANIME_DIRS[@]/%//${1}}" "${TVSHOW_DIRS[@]/%//${1}}" -mindepth 0 -maxdepth 1 2>/dev/null \
                    | grep -F "$1" \
                    | sed -n '1p')"

    case "${path}" in
        "")
            2>&1 echo "ERROR"
            exit
            ;;
        *)
            show_dir="${path}"
            ;;
    esac

    func_result="${show_dir}"
    echo "${func_result}"
}

search_results () {
    case "${main_selection}" in
        " Show All")
            title="磊 Pick a show/movie"
            options="$(printf " Cancel\n Back\n$(cat "${WATCHMENU_CACHE}/watchmenu-all-list")")"
            ;;
        "話 Anime")
            title="話 Pick a show"
            options="$(printf " Cancel\n Back\n$(cat "${WATCHMENU_CACHE}/watchmenu-anime-list")")"
            ;;
        " TV Shows")
            title=" Pick a show"
            options="$(printf " Cancel\n Back\n$(cat "${WATCHMENU_CACHE}/watchmenu-tvshows-list")")"
            ;;
        " Movies")
            title=" Pick a movie"
            options="$(printf " Cancel\n Back\n$(cat "${WATCHMENU_CACHE}/watchmenu-movies-list")")"
            ;;
        " Videos")
            title=" Pick a video"
            options="$(printf " Cancel\n Back\n Play All\n$(cat "${WATCHMENU_CACHE}/watchmenu-videos-list")")"
            ;;
        "")
            exit
            ;;
        *)
            title="Choose"
            grepFunc "${main_selection}"
            options="$(printf " Cancel\n Back\n$(cat "${WATCHMENU_CACHE}/watchmenu-all-list" | grep -i "${grep_pattern}" | sort )")"
            ;;
    esac

    # Request selection
    selection="$(${prompt} "${title}" < <(echo "${options}"))"

    case "${selection}" in
        " Play All") 
            entry=" Videos<==>${WATCHMENU_CACHE}/watchmenu-videos-paths<==>playlist_file"

            ${video_player} --playlist="${WATCHMENU_CACHE}/watchmenu-videos-paths"
            add_to_hist "${entry}"
            
            search_results
            ;;
        " Cancel" | :q | '')
            exit
            ;;
        " Back" | :b | :s)
            main
            ;;
    esac

    # If chosen option is a video file - get its absolute path and play it
    file_path="$(abs_dir "${selection}")"
    if [ "$(file -bi "${file_path}" | grep -o "video")" == "video" ]; then
        title="$(awk -F '/' '{print  ".../" $(NF-2) "/" $(NF-1) "/" $(NF)}' < <(echo "${file_path}"))"
        entry="${title}<==>${file_path}"
        
        ${video_player} "${file_path}"
        add_to_hist "${entry}"
        search_results
    fi

    case "${selection}" in
        :q | " Cancel")
            exit
            ;;
        :s)
            main
            ;;
        :b | " Back")
            main
            ;;
        *)
            show_dir="$(abs_dir "${selection}")"
            ;;
    esac

    case "${show_dir}" in
        ERROR)
            notify-send -r 309872 -t 2000 " Error" "Could not find the specified show/movie. Check your internet connection or try updating the media list."
            main
            ;;
    esac

    season_list
}

# Choose season directory
season_list () {

    check_dir
    case "${dir_type}" in
        MOVIE)
            # This will skip to episode_list
            season="NONE"
            season_dir="${show_dir}"
            ;;
        *)
            # Choose season of the show previously chosen
            title="  Choose season"
            options="$(printf " Cancel\n Back\n Play All\n%s" "$(find "${show_dir}" -mindepth 1 -type d 2>/dev/null | sort -V | awk -F '/' '{print $NF}')")"
            selection="$(${prompt} "${title}" < <(echo "${options}"))"

            season="${selection}"
            season_dir="${show_dir}/${season}"
            case "${selection}" in
                :q | " Cancel" | "")
                    exit
                    ;;
                " Play All")
                    title="$(awk -F '/' '{print  ".../" $(NF-2) "/" $(NF-1) "/" $(NF)}' < <(echo "${show_dir}"))"
                    entry="${title}<==>${show_dir}"
                    
                    ${video_player} "${show_dir}"
                    add_to_hist "${entry}"
                    
                    season_list
                    ;;
                :s)
                    main
                    ;;
                :b | " Back")
                    search_results
                    ;;
            esac
    esac

    episode_list
}

# Choose episode/movie file
episode_list () {
    
    check_dir
    case "${dir_type}" in
        MOVIE)
            title=" Choose movie"
            options="$(printf " Cancel\n Back\n Play All\n%s" "$(find "${season_dir}" -mindepth 1 -maxdepth 1 -type f 2>/dev/null \
                | awk -F '/' '{print $NF}' \
                | sort -u)")"
            selection="$(${prompt} "${title}" < <(echo "${options}"))"

            movie="${selection}"
            file_path="${season_dir}/${movie}"

            case "${movie}" in
                " Play All")
                    title="$(awk -F '/' '{print  ".../" $(NF-2) "/" $(NF-1) "/" $(NF)}' < <(echo "${season_dir}"))"
                    entry="${title}<==>${season_dir}"
                    
                    ${video_player} "${season_dir}"
                    add_to_hist "${entry}"
                    
                    episode_list
                    ;;
                :s)
                    main
                    ;;
                :b | " Back")
                    search_results
                    ;;
                :q | " Cancel")
                    exit
                    ;;
            esac
            ;;
        *)
            title="  Choose episode"
            options="$(printf " Cancel\n Back\n Play All\n%s" "$(find "${season_dir}" -mindepth 1 -maxdepth 1 -type f 2>/dev/null \
                | awk -F '/' '{print $NF}' \
                | sort -u)")"
            selection="$(${prompt} "${title}" < <(echo "${options}"))"

            episode="${selection}"
            file_path="${season_dir}/${episode}"

            case "${episode}" in
                " Play All")
                    title="$(awk -F '/' '{print  ".../" $(NF-2) "/" $(NF-1) "/" $(NF)}' < <(echo "${season_dir}"))"
                    entry="${title}<==>${season_dir}"
                    
                    ${video_player} "${season_dir}"
                    add_to_hist "${entry}"
                    
                    episode_list
                    ;;
                :s)
                    main
                    ;;
                :b | " Back")
                    season_list
                    ;;
                :q | " Cancel")
                    exit
                    ;;
            esac
            ;;
    esac

    echo "File path: ${file_path}"
    title="$(awk -F '/' '{print  ".../" $(NF-2) "/" $(NF-1) "/" $(NF)}' < <(echo "${file_path}"))"
    entry="${title}<==>${file_path}"

    ${video_player} "${file_path}"
    add_to_hist "${entry}"
    
    episode_list
}

# Uncomment these lines to automatically update list upon running the script
# update_list anime
# update_list tvshows
# update_list movies
update_list videos

main
